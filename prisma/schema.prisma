// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  passwordHash String?
  name      String?
  avatar    String?
  googleId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  campaigns Campaign[]

  @@map("users")
}

model Customer {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String
  phone           String?
  totalSpending   Float    @default(0)
  visitCount      Int      @default(0)
  lastVisit       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  orders          Order[]
  communicationLogs CommunicationLog[]

  @@map("customers")
}

model Order {
  id         String   @id @default(cuid())
  items      Json     
  total      Float    
  status     OrderStatus
  notes      String?  
  customerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  rules       Json     
  audienceSize Int     @default(0)
  status      CampaignStatus @default(DRAFT)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
  communicationLogs  CommunicationLog[]

  @@map("campaigns")
}

model CommunicationLog {
  id         String   @id @default(cuid())
  campaignId String
  customerId String
  message    String
  status     MessageStatus @default(PENDING)
  sentAt     DateTime?
  deliveredAt DateTime?
  failedAt   DateTime?
  errorMessage String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("communication_logs")
}

model AudienceSegment {
  id          String   @id @default(cuid())
  name        String
  description String?
  rules       Json     // Store segmentation rules as JSON
  size        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("audience_segments")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
}
